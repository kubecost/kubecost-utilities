#!/bin/bash

# usage: ./trivy.sh [--version x.x.x] [any other helm template args]
# by default, it will run against the latest GA version of kubecost
# if you want to run against a specific version, you can pass it as an argument
# e.g. ./trivy.sh --version 2.6.4-rc.0
# or ./trivy.sh --version 2.6.4-rc.0 -f values-kubecost.yaml

# Check if trivy is installed
if ! command -v trivy &> /dev/null; then
    echo "Trivy is not installed. Please install it using 'brew install trivy'"
    exit 1
fi

# Check if yq is installed
if ! command -v yq &> /dev/null; then
    echo "yq is not installed. Please install it using 'brew install yq'"
    exit 1
fi

# Capture the output of kai and store it in kubecost_images
get_kubecost_images() {
  helm template kubecost --repo https://kubecost.github.io/cost-analyzer/ cost-analyzer \
  --set networkCosts.enabled=true \
  --set clusterController.enabled=true \
  --skip-tests "$@" \
  | yq -r '.. | .image? | select(. != null)' | sort -u
}
kubecost_images=$(get_kubecost_images "$@")
# kubecost_images=$(echo "${kubecost_images}" | grep -E '(/|\.)' || true)  # Filter lines with / or . (likely image names)
kubecost_images=$(echo "${kubecost_images}" | grep -E 'kubecost1' || true)  # Filter Only Kubecost images
# Remove the old results file
rm -f "$(date +%Y-%m-%d)-trivy-results.txt"

# Iterate over each image in kubecost_images
# Use while read to handle multi-line input properly
echo "${kubecost_images}" | while IFS= read -r image; do
  # Skip empty lines
  [[ -z "${image}" ]] && continue
  echo "Scanning: ${image}"
  trivy image --format json --ignore-unfixed --severity CRITICAL,HIGH  "${image}" >> "$(date +%Y-%m-%d)-trivy-results.json"
done


# Convert JSON results to the specified YAML format
json_file="$(date +%Y-%m-%d)-trivy-results.json"
yaml_file="$(date +%Y-%m-%d)-trivy-results.yaml"

if [ -f "$json_file" ]; then
  echo "Converting JSON results to YAML format..."
  
  # Process each JSON object in the file
  jq -c '.' "$json_file" | while read -r json_obj; do
    # Extract the required fields
    artifact_name=$(echo "$json_obj" | jq -r '.ArtifactName')
    
    # Start YAML output
    echo "$artifact_name:" >> "$yaml_file"
    echo "  Results:" >> "$yaml_file"
    
    # Process each result
    echo "$json_obj" | jq -c '.Results[]' | while read -r result; do
      target=$(echo "$result" | jq -r '.Target')
      echo "    \"$target\":" >> "$yaml_file"
      
      # Check if vulnerabilities exist
      if echo "$result" | jq -e '.Vulnerabilities' > /dev/null 2>&1; then
        echo "$result" | jq -c '.Vulnerabilities[]' | while read -r vuln; do
          status=$(echo "$vuln" | jq -r '.Status')
          vuln_id=$(echo "$vuln" | jq -r '.VulnerabilityID')
          severity=$(echo "$vuln" | jq -r '.Severity')
          
          echo "      - Status: $status" >> "$yaml_file"
          echo "        VulnerabilityID: $vuln_id" >> "$yaml_file"
          echo "        Severity: $severity" >> "$yaml_file"
        done
      else
        echo "      No vulnerabilities found" >> "$yaml_file"
      fi
    done
  done
  
  echo "YAML output saved to $yaml_file"
else
  echo "No JSON results file found"
fi