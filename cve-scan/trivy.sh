#!/bin/bash

# usage: ./trivy.sh [--version x.x.x] [any other helm template args]
# by default, it will run against the latest GA version of kubecost
# if you want to run against a specific version, you can pass it as an argument
# e.g. ./trivy.sh --version 2.6.4-rc.0
# or ./trivy.sh --version 2.6.4-rc.0 -f values-kubecost.yaml


# Check if trivy is installed
if ! command -v trivy &> /dev/null; then
    echo "Trivy is not installed. Please install it using 'brew install trivy'"
    exit 1
fi

# Check if yq is installed
if ! command -v yq &> /dev/null; then
    echo "yq is not installed. Please install it using 'brew install yq'"
    exit 1
fi

# Capture the output of kai and store it in kubecost_images
get_kubecost_images() {
  helm template kubecost --repo https://kubecost.github.io/cost-analyzer/ cost-analyzer \
  --set networkCosts.enabled=true \
  --set clusterController.enabled=true \
  --skip-tests "$@" \
  | yq -r '.. | .image? | select(. != null)' | sort -u
}
kubecost_images=$(get_kubecost_images "$@")
# kubecost_images=$(echo "${kubecost_images}" | grep -E '(/|\.)' || true)  # Filter lines with / or . (likely image names)
kubecost_images=$(echo "${kubecost_images}" | grep -E 'kubecost1' || true)  # Filter Only Kubecost images
# Remove the old results file

# Iterate over each image in kubecost_images
# Use while read to handle multi-line input properly
echo "${kubecost_images}" | while IFS= read -r image; do
  # Skip empty lines
  [[ -z "${image}" ]] && continue
  echo ""
  echo ""
  echo "======================================================================="
  echo "Scanning: ${image}"
  trivy image --format table --ignore-unfixed --severity CRITICAL,HIGH --quiet "${image}"
done

echo "======================================================================="
echo "done"
echo "Note that Status: 'fixed' mean our image has fixable vulnerabilities."